<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/task 
	   http://www.springframework.org/schema/task/spring-task-4.1.xsd">


	<!-- This will automatically locate any and all property files you have within your classpath, provided they fall under the META-INF/spring directory. The located property files are parsed and their values 
		can then be used within application context files in the form of ${propertyKey}. -->
	<context:property-placeholder location="classpath*:*.properties" />
	<!-- This declaration will cause Spring to locate every @Component, @Repository and @Service in your application. In practical terms this allows you to write a POJO and then simply annotate the new POJO 
		as an @Service and Spring will automatically detect, instantiate and dependency inject your service at startup time. Importantly, you can then also have your new service injected into any other class that 
		requires it simply by declaring a field for your service inside the relying class and Spring will inject it. Note that two exclude filters are declared. The first ensures that Spring doesn't spend time 
		introspecting Roo-specific ITD aspects. The second ensures Roo doesn't instantiate your @Controller classes, as these should be instantiated by a web tier application context. Refer to web.xml for more 
		details about the web tier application context setup services. Furthermore, this turns on @Autowired, @PostConstruct etc support. These annotations allow you to use common Spring and Java Enterprise Edition 
		annotations in your classes without needing to do any special configuration. The most commonly used annotation is @Autowired, which instructs Spring to dependency inject an object into your class. -->
	<context:component-scan base-package="com.mk">
		<context:exclude-filter expression="org.springframework.stereotype.Controller" type="annotation" />
	</context:component-scan>

	<context:spring-configured />

	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	<task:executor id="mkExecutor" pool-size="10"  />
	
	<task:annotation-driven executor="mkExecutor"/>

	<bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath*:*.properties</value>
			</list>
		</property>
	</bean>
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
		<property name="properties" ref="configProperties" />
	</bean>

	<!-- <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" /> -->

	<!-- 文件系统工具bean. -->
	<bean id="fileSystemUitls" class="com.mk.ots.fs.FileSystemUtils" />


	<bean class="com.mk.framework.AppUtils" />

    <!-- kafka start -->
	
	<bean class="com.mk.kafka.client.MkKafkaContext"/>
	<bean class="com.mk.ots.kafka.message.CareProducer"/>
	<bean class="com.mk.ots.kafka.message.OtsCareProducer"/>
	
	
	<aop:aspectj-autoproxy proxy-target-class="true">
	    		<aop:include name="produceAsepct" />
    </aop:aspectj-autoproxy>
    
	<bean id ="produceAsepct" class="com.mk.kafka.client.aspect.MkProducerAnnotationAspect"/>
	
	<!-- kafka end -->


</beans>
