/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mk.framework.component.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-4-13")
public class IActionExcutor {

  public interface Iface {

    public Outbound doAct(String serviceid, String act, Map<String,String> inbound, API_VERSION api_version) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void doAct(String serviceid, String act, Map<String,String> inbound, API_VERSION api_version, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Outbound doAct(String serviceid, String act, Map<String,String> inbound, API_VERSION api_version) throws org.apache.thrift.TException
    {
      send_doAct(serviceid, act, inbound, api_version);
      return recv_doAct();
    }

    public void send_doAct(String serviceid, String act, Map<String,String> inbound, API_VERSION api_version) throws org.apache.thrift.TException
    {
      doAct_args args = new doAct_args();
      args.setServiceid(serviceid);
      args.setAct(act);
      args.setInbound(inbound);
      args.setApi_version(api_version);
      sendBase("doAct", args);
    }

    public Outbound recv_doAct() throws org.apache.thrift.TException
    {
      doAct_result result = new doAct_result();
      receiveBase(result, "doAct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "doAct failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void doAct(String serviceid, String act, Map<String,String> inbound, API_VERSION api_version, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      doAct_call method_call = new doAct_call(serviceid, act, inbound, api_version, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class doAct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String serviceid;
      private String act;
      private Map<String,String> inbound;
      private API_VERSION api_version;
      public doAct_call(String serviceid, String act, Map<String,String> inbound, API_VERSION api_version, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceid = serviceid;
        this.act = act;
        this.inbound = inbound;
        this.api_version = api_version;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("doAct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        doAct_args args = new doAct_args();
        args.setServiceid(serviceid);
        args.setAct(act);
        args.setInbound(inbound);
        args.setApi_version(api_version);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Outbound getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_doAct();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("doAct", new doAct());
      return processMap;
    }

    public static class doAct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, doAct_args> {
      public doAct() {
        super("doAct");
      }

      public doAct_args getEmptyArgsInstance() {
        return new doAct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public doAct_result getResult(I iface, doAct_args args) throws org.apache.thrift.TException {
        doAct_result result = new doAct_result();
        result.success = iface.doAct(args.serviceid, args.act, args.inbound, args.api_version);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("doAct", new doAct());
      return processMap;
    }

    public static class doAct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, doAct_args, Outbound> {
      public doAct() {
        super("doAct");
      }

      public doAct_args getEmptyArgsInstance() {
        return new doAct_args();
      }

      public AsyncMethodCallback<Outbound> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Outbound>() { 
          public void onComplete(Outbound o) {
            doAct_result result = new doAct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            doAct_result result = new doAct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, doAct_args args, org.apache.thrift.async.AsyncMethodCallback<Outbound> resultHandler) throws TException {
        iface.doAct(args.serviceid, args.act, args.inbound, args.api_version,resultHandler);
      }
    }

  }

  public static class doAct_args implements org.apache.thrift.TBase<doAct_args, doAct_args._Fields>, java.io.Serializable, Cloneable, Comparable<doAct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doAct_args");

    private static final org.apache.thrift.protocol.TField SERVICEID_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACT_FIELD_DESC = new org.apache.thrift.protocol.TField("act", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField INBOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("inbound", org.apache.thrift.protocol.TType.MAP, (short)3);
    private static final org.apache.thrift.protocol.TField API_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("api_version", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doAct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doAct_argsTupleSchemeFactory());
    }

    public String serviceid; // required
    public String act; // required
    public Map<String,String> inbound; // required
    /**
     * 
     * @see API_VERSION
     */
    public API_VERSION api_version; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICEID((short)1, "serviceid"),
      ACT((short)2, "act"),
      INBOUND((short)3, "inbound"),
      /**
       * 
       * @see API_VERSION
       */
      API_VERSION((short)4, "api_version");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICEID
            return SERVICEID;
          case 2: // ACT
            return ACT;
          case 3: // INBOUND
            return INBOUND;
          case 4: // API_VERSION
            return API_VERSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICEID, new org.apache.thrift.meta_data.FieldMetaData("serviceid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACT, new org.apache.thrift.meta_data.FieldMetaData("act", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INBOUND, new org.apache.thrift.meta_data.FieldMetaData("inbound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP          , "Inbound")));
      tmpMap.put(_Fields.API_VERSION, new org.apache.thrift.meta_data.FieldMetaData("api_version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, API_VERSION.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doAct_args.class, metaDataMap);
    }

    public doAct_args() {
    }

    public doAct_args(
      String serviceid,
      String act,
      Map<String,String> inbound,
      API_VERSION api_version)
    {
      this();
      this.serviceid = serviceid;
      this.act = act;
      this.inbound = inbound;
      this.api_version = api_version;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doAct_args(doAct_args other) {
      if (other.isSetServiceid()) {
        this.serviceid = other.serviceid;
      }
      if (other.isSetAct()) {
        this.act = other.act;
      }
      if (other.isSetInbound()) {
        this.inbound = other.inbound;
      }
      if (other.isSetApi_version()) {
        this.api_version = other.api_version;
      }
    }

    public doAct_args deepCopy() {
      return new doAct_args(this);
    }

    @Override
    public void clear() {
      this.serviceid = null;
      this.act = null;
      this.inbound = null;
      this.api_version = null;
    }

    public String getServiceid() {
      return this.serviceid;
    }

    public doAct_args setServiceid(String serviceid) {
      this.serviceid = serviceid;
      return this;
    }

    public void unsetServiceid() {
      this.serviceid = null;
    }

    /** Returns true if field serviceid is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceid() {
      return this.serviceid != null;
    }

    public void setServiceidIsSet(boolean value) {
      if (!value) {
        this.serviceid = null;
      }
    }

    public String getAct() {
      return this.act;
    }

    public doAct_args setAct(String act) {
      this.act = act;
      return this;
    }

    public void unsetAct() {
      this.act = null;
    }

    /** Returns true if field act is set (has been assigned a value) and false otherwise */
    public boolean isSetAct() {
      return this.act != null;
    }

    public void setActIsSet(boolean value) {
      if (!value) {
        this.act = null;
      }
    }

    public int getInboundSize() {
      return (this.inbound == null) ? 0 : this.inbound.size();
    }

    public void putToInbound(String key, String val) {
      if (this.inbound == null) {
        this.inbound = new HashMap<String,String>();
      }
      this.inbound.put(key, val);
    }

    public Map<String,String> getInbound() {
      return this.inbound;
    }

    public doAct_args setInbound(Map<String,String> inbound) {
      this.inbound = inbound;
      return this;
    }

    public void unsetInbound() {
      this.inbound = null;
    }

    /** Returns true if field inbound is set (has been assigned a value) and false otherwise */
    public boolean isSetInbound() {
      return this.inbound != null;
    }

    public void setInboundIsSet(boolean value) {
      if (!value) {
        this.inbound = null;
      }
    }

    /**
     * 
     * @see API_VERSION
     */
    public API_VERSION getApi_version() {
      return this.api_version;
    }

    /**
     * 
     * @see API_VERSION
     */
    public doAct_args setApi_version(API_VERSION api_version) {
      this.api_version = api_version;
      return this;
    }

    public void unsetApi_version() {
      this.api_version = null;
    }

    /** Returns true if field api_version is set (has been assigned a value) and false otherwise */
    public boolean isSetApi_version() {
      return this.api_version != null;
    }

    public void setApi_versionIsSet(boolean value) {
      if (!value) {
        this.api_version = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICEID:
        if (value == null) {
          unsetServiceid();
        } else {
          setServiceid((String)value);
        }
        break;

      case ACT:
        if (value == null) {
          unsetAct();
        } else {
          setAct((String)value);
        }
        break;

      case INBOUND:
        if (value == null) {
          unsetInbound();
        } else {
          setInbound((Map<String,String>)value);
        }
        break;

      case API_VERSION:
        if (value == null) {
          unsetApi_version();
        } else {
          setApi_version((API_VERSION)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICEID:
        return getServiceid();

      case ACT:
        return getAct();

      case INBOUND:
        return getInbound();

      case API_VERSION:
        return getApi_version();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICEID:
        return isSetServiceid();
      case ACT:
        return isSetAct();
      case INBOUND:
        return isSetInbound();
      case API_VERSION:
        return isSetApi_version();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doAct_args)
        return this.equals((doAct_args)that);
      return false;
    }

    public boolean equals(doAct_args that) {
      if (that == null)
        return false;

      boolean this_present_serviceid = true && this.isSetServiceid();
      boolean that_present_serviceid = true && that.isSetServiceid();
      if (this_present_serviceid || that_present_serviceid) {
        if (!(this_present_serviceid && that_present_serviceid))
          return false;
        if (!this.serviceid.equals(that.serviceid))
          return false;
      }

      boolean this_present_act = true && this.isSetAct();
      boolean that_present_act = true && that.isSetAct();
      if (this_present_act || that_present_act) {
        if (!(this_present_act && that_present_act))
          return false;
        if (!this.act.equals(that.act))
          return false;
      }

      boolean this_present_inbound = true && this.isSetInbound();
      boolean that_present_inbound = true && that.isSetInbound();
      if (this_present_inbound || that_present_inbound) {
        if (!(this_present_inbound && that_present_inbound))
          return false;
        if (!this.inbound.equals(that.inbound))
          return false;
      }

      boolean this_present_api_version = true && this.isSetApi_version();
      boolean that_present_api_version = true && that.isSetApi_version();
      if (this_present_api_version || that_present_api_version) {
        if (!(this_present_api_version && that_present_api_version))
          return false;
        if (!this.api_version.equals(that.api_version))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_serviceid = true && (isSetServiceid());
      list.add(present_serviceid);
      if (present_serviceid)
        list.add(serviceid);

      boolean present_act = true && (isSetAct());
      list.add(present_act);
      if (present_act)
        list.add(act);

      boolean present_inbound = true && (isSetInbound());
      list.add(present_inbound);
      if (present_inbound)
        list.add(inbound);

      boolean present_api_version = true && (isSetApi_version());
      list.add(present_api_version);
      if (present_api_version)
        list.add(api_version.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(doAct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetServiceid()).compareTo(other.isSetServiceid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceid, other.serviceid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAct()).compareTo(other.isSetAct());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAct()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.act, other.act);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInbound()).compareTo(other.isSetInbound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInbound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inbound, other.inbound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApi_version()).compareTo(other.isSetApi_version());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApi_version()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.api_version, other.api_version);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doAct_args(");
      boolean first = true;

      sb.append("serviceid:");
      if (this.serviceid == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("act:");
      if (this.act == null) {
        sb.append("null");
      } else {
        sb.append(this.act);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inbound:");
      if (this.inbound == null) {
        sb.append("null");
      } else {
        sb.append(this.inbound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("api_version:");
      if (this.api_version == null) {
        sb.append("null");
      } else {
        sb.append(this.api_version);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doAct_argsStandardSchemeFactory implements SchemeFactory {
      public doAct_argsStandardScheme getScheme() {
        return new doAct_argsStandardScheme();
      }
    }

    private static class doAct_argsStandardScheme extends StandardScheme<doAct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doAct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVICEID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serviceid = iprot.readString();
                struct.setServiceidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.act = iprot.readString();
                struct.setActIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INBOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.inbound = new HashMap<String,String>(2*_map0.size);
                  String _key1;
                  String _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    _val2 = iprot.readString();
                    struct.inbound.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setInboundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // API_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.api_version = API_VERSION.findByValue(iprot.readI32());
                struct.setApi_versionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doAct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serviceid != null) {
          oprot.writeFieldBegin(SERVICEID_FIELD_DESC);
          oprot.writeString(struct.serviceid);
          oprot.writeFieldEnd();
        }
        if (struct.act != null) {
          oprot.writeFieldBegin(ACT_FIELD_DESC);
          oprot.writeString(struct.act);
          oprot.writeFieldEnd();
        }
        if (struct.inbound != null) {
          oprot.writeFieldBegin(INBOUND_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.inbound.size()));
            for (Map.Entry<String, String> _iter4 : struct.inbound.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.api_version != null) {
          oprot.writeFieldBegin(API_VERSION_FIELD_DESC);
          oprot.writeI32(struct.api_version.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doAct_argsTupleSchemeFactory implements SchemeFactory {
      public doAct_argsTupleScheme getScheme() {
        return new doAct_argsTupleScheme();
      }
    }

    private static class doAct_argsTupleScheme extends TupleScheme<doAct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doAct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServiceid()) {
          optionals.set(0);
        }
        if (struct.isSetAct()) {
          optionals.set(1);
        }
        if (struct.isSetInbound()) {
          optionals.set(2);
        }
        if (struct.isSetApi_version()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetServiceid()) {
          oprot.writeString(struct.serviceid);
        }
        if (struct.isSetAct()) {
          oprot.writeString(struct.act);
        }
        if (struct.isSetInbound()) {
          {
            oprot.writeI32(struct.inbound.size());
            for (Map.Entry<String, String> _iter5 : struct.inbound.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
        if (struct.isSetApi_version()) {
          oprot.writeI32(struct.api_version.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doAct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.serviceid = iprot.readString();
          struct.setServiceidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.act = iprot.readString();
          struct.setActIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.inbound = new HashMap<String,String>(2*_map6.size);
            String _key7;
            String _val8;
            for (int _i9 = 0; _i9 < _map6.size; ++_i9)
            {
              _key7 = iprot.readString();
              _val8 = iprot.readString();
              struct.inbound.put(_key7, _val8);
            }
          }
          struct.setInboundIsSet(true);
        }
        if (incoming.get(3)) {
          struct.api_version = API_VERSION.findByValue(iprot.readI32());
          struct.setApi_versionIsSet(true);
        }
      }
    }

  }

  public static class doAct_result implements org.apache.thrift.TBase<doAct_result, doAct_result._Fields>, java.io.Serializable, Cloneable, Comparable<doAct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doAct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doAct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doAct_resultTupleSchemeFactory());
    }

    public Outbound success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Outbound.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doAct_result.class, metaDataMap);
    }

    public doAct_result() {
    }

    public doAct_result(
      Outbound success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doAct_result(doAct_result other) {
      if (other.isSetSuccess()) {
        this.success = new Outbound(other.success);
      }
    }

    public doAct_result deepCopy() {
      return new doAct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Outbound getSuccess() {
      return this.success;
    }

    public doAct_result setSuccess(Outbound success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Outbound)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doAct_result)
        return this.equals((doAct_result)that);
      return false;
    }

    public boolean equals(doAct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(doAct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doAct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doAct_resultStandardSchemeFactory implements SchemeFactory {
      public doAct_resultStandardScheme getScheme() {
        return new doAct_resultStandardScheme();
      }
    }

    private static class doAct_resultStandardScheme extends StandardScheme<doAct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doAct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Outbound();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doAct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doAct_resultTupleSchemeFactory implements SchemeFactory {
      public doAct_resultTupleScheme getScheme() {
        return new doAct_resultTupleScheme();
      }
    }

    private static class doAct_resultTupleScheme extends TupleScheme<doAct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doAct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doAct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Outbound();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
